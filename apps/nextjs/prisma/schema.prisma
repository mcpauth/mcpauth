datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String          @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  // Optional for WebAuthn support
  Authenticator  Authenticator[]
  mcpRequestLogs McpRequestLog[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model McpRequestLog {
  id           String   @id @default(cuid())
  timestamp    DateTime @default(now())
  functionName String
  parameters   Json? // Store parameters as JSON
  results      Json? // Store results as JSON
  userId       String? // Optional: to link logs to users
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([timestamp])
}

// MARK: OAUTH SERVER

model OAuthClient {
  id                      String   @id @default(cuid())
  clientId                String   @unique
  clientSecret            String? // null for public clients
  tokenEndpointAuthMethod String   @default("client_secret_basic")
  name                    String
  description             String?
  logoUri                 String?
  redirectUris            String[]
  grantTypes              String[]
  scope                   String?

  userId String?

  authorizationCodes OAuthAuthorizationCode[]
  tokens             OAuthToken[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OAuthAuthorizationCode {
  authorizationCode    String   @id
  expiresAt            DateTime
  redirectUri          String
  scope                String?
  authorizationDetails Json?
  codeChallenge        String?
  codeChallengeMethod  String?

  clientId String
  client   OAuthClient @relation(fields: [clientId], references: [id], onDelete: Cascade)

  userId String

  createdAt DateTime @default(now())
}

model OAuthToken {
  accessToken           String    @id
  accessTokenExpiresAt  DateTime
  refreshToken          String?   @unique
  refreshTokenExpiresAt DateTime?
  scope                 String?
  authorizationDetails  Json?

  clientId String
  client   OAuthClient @relation(fields: [clientId], references: [id], onDelete: Cascade)

  userId String

  createdAt DateTime @default(now())
}
