datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model OAuthClient {
  id                      String   @id @default(cuid())
  clientId                String   @unique @map("client_id")
  clientSecret            String?  @map("client_secret")
  tokenEndpointAuthMethod String   @map("token_endpoint_auth_method")
  name                    String
  description             String?
  logoUri                 String?
  redirectUris            String[] @map("redirect_uris")
  grantTypes              String[] @map("grant_types")
  scope                   String?
  userId                  String?  @map("user_id")

  authorizationCodes OAuthAuthorizationCode[]
  tokens             OAuthToken[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("oauth_client")
}

model OAuthAuthorizationCode {
  authorizationCode    String   @id @map("authorization_code")
  expiresAt            DateTime @map("expires_at")
  redirectUri          String   @map("redirect_uri")
  scope                String?
  authorizationDetails Json?    @map("authorization_details")
  codeChallenge        String?  @map("code_challenge")
  codeChallengeMethod  String?  @map("code_challenge_method")

  clientId String      @map("client_id")
  client   OAuthClient @relation(fields: [clientId], references: [id], onDelete: Cascade)

  userId String @map("user_id")

  createdAt DateTime @default(now()) @map("created_at")

  @@map("oauth_authorization_code")
}

model OAuthToken {
  accessToken           String    @id @map("access_token")
  accessTokenExpiresAt  DateTime  @map("access_token_expires_at")
  refreshToken          String?   @unique @map("refresh_token")
  refreshTokenExpiresAt DateTime? @map("refresh_token_expires_at")
  scope                 String?
  authorizationDetails  Json?     @map("authorization_details")

  clientId String      @map("client_id")
  client   OAuthClient @relation(fields: [clientId], references: [id], onDelete: Cascade)

  userId String @map("user_id")

  createdAt DateTime @default(now()) @map("created_at")

  @@map("oauth_token")
}
